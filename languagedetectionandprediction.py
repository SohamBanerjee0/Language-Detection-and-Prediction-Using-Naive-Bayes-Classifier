# -*- coding: utf-8 -*-
"""LanguageDetectionAndPrediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KLQiYnGyn2UXuyKUz15gD6GDutSKf_MU

IMPORTING THE DEPENDENCIES
"""

import pandas as pd
import numpy as np
import re
import seaborn as sns
import matplotlib.pyplot as plt
import warnings
warnings.simplefilter("ignore")

"""DOWNLOADING THE DATA"""

data = pd.read_csv("Language Detection.csv")

"""DATA PROCESSING AND STUDY """

data.head(10)

data["Language"].value_counts()

"""SEPARATING DEPENDENT AND INDEPENDENT ITEMS"""

X = data["Text"]
y = data["Language"]

"""ENCODING THE DATA _ LABEL ENCODING"""

from sklearn.preprocessing import LabelEncoder
le = LabelEncoder()
y = le.fit_transform(y)

"""TEXT PRE-PROCESSING"""

# creating a list for appending the preprocessed text
data_list = []
# iterating through all the text
for text in X:
       # removing the symbols and numbers
        text = re.sub(r'[!@#$(),n"%^*?:;~`0-9]', ' ', text)
        text = re.sub(r'[[]]', ' ', text)
        # converting the text to lower case
        text = text.lower()
        # appending to data_list
        data_list.append(text)

"""TOTAL WORDS STOCK"""

from sklearn.feature_extraction.text import CountVectorizer
cv = CountVectorizer()
X = cv.fit_transform(data_list).toarray()
X.shape # (10337, 39419)

"""SPLITTING TRAINING AND TEST DATA"""

from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(X, y, test_size = 0.20)

"""MODEL TRAINING - SKLEARN MULTINOMINAL NB

NAIVE BAYES CLASSIFIER IS USED DUE TO DISCRETION IN DATA FEATURES
"""

from sklearn.naive_bayes import MultinomialNB
model = MultinomialNB()
model.fit(x_train, y_train)

y_pred = model.predict(x_test)

"""MODEL EVALUATION

ACCURACY CHECK
"""

from sklearn.metrics import accuracy_score, confusion_matrix, classification_report
ac = accuracy_score(y_test, y_pred)
cm = confusion_matrix(y_test, y_pred)

print("Accuracy is :",ac)

"""HEATMAP - GRAPHICAL REPRESENTATION OF THE DATA """

plt.figure(figsize=(15,10))
sns.heatmap(cm, annot = True)
plt.show()

"""CREATING A PREDICTIVE SYSTEM"""

def predict(text):
     x = cv.transform([text]).toarray() # converting text to bag of words model (Vector)
     lang = model.predict(x) # predicting the language
     lang = le.inverse_transform(lang) # finding the language corresponding the the predicted value
     print("The langauge is in",lang[0]) # printing the language

"""PREDICTIONS ON CUSTOM DATA OF SIMILAR NATURE TO TEST THE MACHINE"""

# English
predict("Analytics Vidhya provides a community based knowledge portal for Analytics and Data Science professionals")

# French
predict("Analytics Vidhya fournit un portail de connaissances basé sur la communauté pour les professionnels de l'analyse et de la science des données")

# Arabic
predict("توفر Analytics Vidhya بوابة معرفية قائمة على المجتمع لمحترفي التحليلات وعلوم البيانات")

# Spanish
predict("Analytics Vidhya proporciona un portal de conocimiento basado en la comunidad para profesionales de Analytics y Data Science.")

# Malayalam
predict("അനലിറ്റിക്സ്, ഡാറ്റാ സയൻസ് പ്രൊഫഷണലുകൾക്കായി കമ്മ്യൂണിറ്റി അധിഷ്ഠിത വിജ്ഞാന പോർട്ടൽ അനലിറ്റിക്സ് വിദ്യ നൽകുന്നു")

# Russian
predict("Analytics Vidhya - это портал знаний на базе сообщества для профессионалов в области аналитики и данных.")

"""USER CHOICE OF INPUT AND PREDICTION ON THE USER GIVEN SENTENCE OR WORD

AVAILABLE LANGUAGES TO BE PREDICTED:

English       
French        
Spanish       
Portugeese    
Italian       
Russian       
Sweedish       
Malayalam      
Dutch          
Arabic        
Turkish        
German         
Tamil          
Danish        
Kannada        
Greek          
Hindi
"""

lang_input = input("Enter a sentence in the above listed languages : ")
predict(lang_input)